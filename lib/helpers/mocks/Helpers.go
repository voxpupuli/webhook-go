// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	parsers "github.com/voxpupuli/webhook-go/lib/parsers"
)

// Helpers is an autogenerated mock type for the Helpers type
type Helpers struct {
	mock.Mock
}

// GetBranch provides a mock function with given fields: data, defaultBranch
func (_m *Helpers) GetBranch(data parsers.Data, defaultBranch string) string {
	ret := _m.Called(data, defaultBranch)

	var r0 string
	if rf, ok := ret.Get(0).(func(parsers.Data, string) string); ok {
		r0 = rf(data, defaultBranch)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetEnvironment provides a mock function with given fields: branch, prefix, allowUppercase
func (_m *Helpers) GetEnvironment(branch string, prefix string, allowUppercase bool) string {
	ret := _m.Called(branch, prefix, allowUppercase)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, bool) string); ok {
		r0 = rf(branch, prefix, allowUppercase)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetPrefix provides a mock function with given fields: data, prefix
func (_m *Helpers) GetPrefix(data parsers.Data, prefix string) string {
	ret := _m.Called(data, prefix)

	var r0 string
	if rf, ok := ret.Get(0).(func(parsers.Data, string) string); ok {
		r0 = rf(data, prefix)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetR10kConfig provides a mock function with given fields:
func (_m *Helpers) GetR10kConfig() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Normalize provides a mock function with given fields: allowUpper, str
func (_m *Helpers) Normalize(allowUpper bool, str string) string {
	ret := _m.Called(allowUpper, str)

	var r0 string
	if rf, ok := ret.Get(0).(func(bool, string) string); ok {
		r0 = rf(allowUpper, str)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
