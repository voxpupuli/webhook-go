name: publish üê≥ Docker image

on:
  push:
    tags:
      - "v*"

jobs:

  build-and-push-image:

    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
        with:
            fetch-depth: 0
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Set up Go
        uses: actions/setup-go@v2
        with:
            go-version: 1.18
      -
        name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Install goreleaser
        uses: goreleaser/goreleaser-action@v3
        with:
            install-only: true
      -
        name: Build artifacts
        run: "make build"
      -
        name: Get tags
        shell: python
        run: |
          import re
          from packaging.version import parse
          version = "${{ github.ref }}".replace("refs/tags/v", "")
          image = "ghcr.io/${{ github.repository }}"
          tags = set()
          # full version
          tags.add(f"{image}:{version}")
          if not parse(version).is_prerelease:
              # only final and post-releases should get the tags
              # used for automatic use of latest *stable* version
              # major_version
              major_version = re.search(r'(\d+?)\.', version).group(1)
              tags.add(f"{image}:{major_version}")
              # major_version.minor_version
              major_and_minor_version = re.search(r'(\d+?\.\d+?)\.', version).group(1)
              tags.add(f"{image}:{major_and_minor_version}")
              tags.add(f"{image}:latest")
          tags = ",".join(sorted(list(tags)))
          print(f"::set-output name=tags::{tags}")
        id: tags
      -
        name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.tags.outputs.tags }}
